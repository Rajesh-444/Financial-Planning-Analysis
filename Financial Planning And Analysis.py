# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKXFkHd8tnSg6Dxy00hHJSFNUybStZx-
"""

pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from prophet import Prophet
# from prophet.plot import plot_plotly
# import plotly.express as px
# import datetime

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from prophet import Prophet
# from prophet.plot import plot_plotly
# import plotly.express as px
# import datetime
# 
# st.set_page_config(page_title="FP&A Dashboard", layout="wide")
# st.title(" Financial Planning & Analysis (FP&A) Dashboard")
# 
# st.subheader("📊 FP&A - Financial Forecasting App")
# 
# # File uploader
# uploaded_file = st.file_uploader("Upload your historical financial data (CSV)", type=["csv"])
# 
# # Placeholder for the main DataFrame
# df = None
# 
# @st.cache_data
# def generate_data():
#     np.random.seed(42)
#     dates = pd.date_range(start="2021-01-01", end="2025-07-31", freq='MS')
#     categories = ['Labor', 'Procurement', 'Overhead']
#     data = []
#     for date in dates:
#         for cat in categories:
#             amount = np.random.normal(loc=5000 if cat == 'Labor' else 3000 if cat == 'Procurement' else 2000, scale=500)
#             data.append([date, cat, round(amount, 2)])
#     return pd.DataFrame(data, columns=["Date", "Category", "Amount"])
# 
# 
# if uploaded_file is not None:
#     try:
#         df = pd.read_csv(uploaded_file)
#         st.success("✅ File uploaded successfully!")
# 
#         st.subheader("Preview of Uploaded Data")
#         st.dataframe(df.head())
# 
#         # Ensure 'date dd/mm/yyyy' column is datetime and 'amount' is numeric
#         # Use the specified date format and handle potential errors
#         if 'date dd/mm/yyyy' in df.columns:
#             df['date dd/mm/yyyy'] = pd.to_datetime(df['date dd/mm/yyyy'], format='%d/%m/%Y', errors='coerce')
#             df.rename(columns={'date dd/mm/yyyy': 'Date'}, inplace=True) # Rename to 'Date' for consistency
#         if 'amount' in df.columns:
#             df['Amount'] = pd.to_numeric(df['amount'], errors='coerce')
#             df.dropna(subset=['Amount'], inplace=True) # Drop rows where Amount could not be converted
#             df.drop(columns=['amount'], inplace=True) # Drop the original 'amount' column
# 
#         # Proceed with analysis and forecasting only if essential columns exist
#         if 'Date' in df.columns and 'Amount' in df.columns:
#              # Now the rest of the app will use this uploaded df
#              pass # Continue to the next parts of the app script
#         else:
#              st.error("Uploaded CSV must contain 'date dd/mm/yyyy' and 'amount' columns.")
#              df = None # Reset df to None if essential columns are missing
# 
#     except Exception as e:
#         st.error(f"Error processing file: {e}")
#         df = None # Reset df to None on error
# 
# else:
#     st.warning("Please upload a CSV file or use the generated sample data.")
#     # If no file is uploaded, use the generated data
#     with st.spinner('Generating sample data...'):
#         df = generate_data()
# 
# 
# # Only proceed if df is available (either from upload or generation)
# if df is not None:
#     with st.expander("🔍 View Raw Data"):
#         st.dataframe(df.head(20))
# 
#     if 'Date' in df.columns and 'Amount' in df.columns:
#         with st.spinner('Training forecast model...'):
#             # Aggregate data for Prophet
#             monthly_df = df.groupby("Date")["Amount"].sum().reset_index()
#             monthly_df.columns = ['ds', 'y']
#             # Ensure 'ds' is datetime
#             monthly_df['ds'] = pd.to_datetime(monthly_df['ds'])
# 
#             # Prophet requires at least two data points
#             if len(monthly_df) >= 2:
#                 model = Prophet(yearly_seasonality=True)
#                 model.fit(monthly_df)
# 
#                 future = model.make_future_dataframe(periods=12, freq='M')
#                 forecast = model.predict(future)
# 
#                 st.subheader("📈 Forecast Visualization (Next 12 Months)")
#                 fig = plot_plotly(model, forecast)
#                 st.plotly_chart(fig, use_container_width=True)
# 
#             else:
#                 st.warning("Not enough data points to train the forecast model.")
# 
#         st.subheader("📊 Budget Planning & Anomaly Alerts")
#         # Ensure monthly_df is available from the forecasting step if needed,
#         # or re-calculate if forecasting was skipped due to insufficient data.
#         if 'monthly_df' not in locals() or monthly_df is None or len(monthly_df) < 2:
#              monthly_df = df.groupby("Date")["Amount"].sum().reset_index()
#              monthly_df.columns = ['ds', 'y']
#              # Ensure 'ds' is datetime
#              monthly_df['ds'] = pd.to_datetime(monthly_df['ds'])
# 
# 
#         if len(monthly_df) > 0:
#             historical_mean = monthly_df['y'].mean()
#             budget = st.slider("Set Monthly Budget Threshold", min_value=int(historical_mean*0.5), max_value=int(historical_mean*1.5) + 1000, value=int(historical_mean)+500)
# 
#             # Budget status
#             latest_month = monthly_df.iloc[-1]
#             status = "🔺 Over Budget" if latest_month['y'] > budget else "✅ Within Budget"
#             st.metric(label=f"Last Recorded Month ({latest_month['ds'].date()})", value=f"₹{latest_month['y']:.2f}", delta=status)
#         else:
#              st.warning("Not enough monthly data to calculate budget status.")
# 
#         if ('Category' in df.columns or 'category' in df.columns):
#             st.subheader("📂 Category-Wise Trends")
#             # Use 'Category' or 'category' depending on which one exists after upload
#             category_col = 'Category' if 'Category' in df.columns else 'category'
#             pivot = df.pivot_table(index='Date', columns=category_col, values='Amount', aggfunc='sum').reset_index()
#             # Drop columns that are not categories (like 'Date') before passing to px.line
#             category_cols_to_plot = [col for col in pivot.columns if col != 'Date']
#             fig_cat = px.line(pivot, x='Date', y=category_cols_to_plot, title='Category-Level Spend Trends')
#             st.plotly_chart(fig_cat, use_container_width=True)
#         else:
#             st.warning("Category-wise trends require a 'Category' or 'category' column in the data.")

!npm install -g localtunnel

!streamlit run app.py & npx localtunnel --port 8501

